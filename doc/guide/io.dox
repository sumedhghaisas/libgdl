/*! @page tut_io libGDL Input and Output

@section iointro Introduction

libGDL provides the following:

 - libgdl::Log, for debugging / informational / warning / fatal output
 - LOGID, for verbose logging
 - libgdl::util::GDLStream, for passing inputs to KIF 

Each of those classes are well-documented, and that documentation should be
consulted for further reference.

@section simplelog Simple Logging

libGDL has four logging levels:

 - Log::Debug
 - Log::Info
 - Log::Warn
 - Log::Fatal
 
The logging module implements global logger for simple and trivial logging.

Here is a simple example, and its output:

@code
#include <libgdl/core.hpp>

using namespace std;

int main()
{
  GLOBAL_DEBUG << "Debugging." << std::endl;
  GLOBAL_INFO << "Some test informational output." << std::endl;
  GLOBAL_WARN << "A warning!" << std::endl;
  GLOBAL_FATAL << "Program has crashed." << std::endl;
  return 0;
}
@endcode

Output of the code -

@code
[DEBUG] Compiled with debugging symbols.
[INFO ] Some test informational output.
[WARN ] A warning!
[FATAL] Program has crashed.
@endcode

Here the '[DEBUG]' and similar prefixes are colored by their severity level. 
This coloring only works for terminal output. To turn the coloring off 

@code
GLOBAL_LOG.RemoveColor();
@endcode

'GLOBAL_LOG' returns the global logging object. 'GLOBAL_LOG.SetColor()' can be 
used to set the colors back. For more logging options check class libgdl::Log. 

For setting global sink of the log well documented libgdl::Log::SetStream
function can be used on GLOBAL_LOG object.

For more complex use logging objects can be defined. The same effect as the 
above code can be achieved with logging objects as follows -

@code
#include <libgdl/core.hpp>

using namespace libgdl;

int main(int argc, char** argv)
{
  Log log;
  log.Debug << "Debugging." << std::endl;
  log.Info << "Some test informational output." << std::endl;
  log.Warn << "A warning!" << std::endl;
  log.Fatal << "Program has crashed." << std::endl;
}
@endcode

Log also supports time-stamp addition. For example -

@code
#include <libgdl/core.hpp>

using namespace libgdl;

int main(int argc, char** argv)
{
  Log log(std::cout, true);
  log.Debug << "Debugging." << std::endl;
  log.Info << "Some test informational output." << std::endl;
  log.Warn << "A warning!" << std::endl;
  log.Fatal << "Program has crashed." << std::endl;
}
@endcode

The output of this is:

@code
Sat Oct 11 00:28:14 2014 [DEBUG] Debugging.
Sat Oct 11 00:28:14 2014 [INFO ] Some test informational output.
Sat Oct 11 00:28:14 2014 [WARN ] A warning!
Sat Oct 11 00:28:14 2014 [FATAL] Program has crashed.
@endcode

@section logid Using LOGID

Sometimes it is useful to print which line of the code printed the following 
words. Many times this comes handy for debugging the code. For this purpose
libGDL defines a preprocessor macro names 'LOGID'. 

Example use of LOGID -

@code 
#include <libgdl/core.hpp>

using namespace std;

int main()
{
  cout << LOGID << "testing" << endl;
  return 0;
}
@endcode

This will produce output of -

@code
/home/sumedh/projects/libgdl/main.cpp(7): testing
@endcode

LOGID will be replaced by filename along with the line number as shown.

@section gdlstream Using GDLStream as inputs

KIF module is constructed in such a way so as to abstract the way of input from
it. This let us pass game description in many ways to KIF module. To add a file
to KIF, one can directly use the function KIF::AddFile(filename). But sometimes
the decription is given as a string input. In that case the example code is given 
below -

@code
#include <libgdl/core.hpp>
#include <libgdl/gdlparser/kif.hpp>

#include <sstream>

using namespace std;
using namespace libgdl;
using namespace libgdl::util;
using namespace libgdl::gdlparser;

int main()
{
  stringstream ss;
  ss << "(role robot)";
  GDLStream stream("any name", &ss);

  KIF kif;
  kif.AddStream(stream);
  kif.Parse();

  return 0;
}
@endcode

For more information refer to documentation on class GDLStream.
*/
